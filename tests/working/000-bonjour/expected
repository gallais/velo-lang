Running Test
[ INFO  ] # Finished Parsing
[ INFO  ] # Finished Type Checking
[ INFO  ] # Finished Executing
```
let m = zero
in let n = (inc m)
   in let p = (add m n)
      in let b = true
         in let x = false
            in let y = (and b x)
               in let f = (fun q : Nat => q)
                  in (f zero)
```
### Reduce Application
```
let m = (inc zero)
in let n = (add zero m)
   in let b = true
      in let x = false
         in let y = (and b x)
            in let f = (fun p : Nat => p)
               in (f zero)
```
### Reduce Application
```
let m = (add zero (inc zero))
in let b = true
   in let x = false
      in let y = (and b x)
         in let f = (fun n : Nat => n)
            in (f zero)
```
### Simplify Application Variable by Reduce Add Left is Zero
```
let m = (inc zero)
in let b = true
   in let x = false
      in let y = (and b x)
         in let f = (fun n : Nat => n)
            in (f zero)
```
### Reduce Application
```
let b = true
in let x = false
   in let y = (and b x)
      in let f = (fun m : Nat => m)
         in (f zero)
```
### Reduce Application
```
let b = false
in let x = (and true b)
   in let f = (fun m : Nat => m)
      in (f zero)
```
### Reduce Application
```
let b = (and true false)
in let f = (fun m : Nat => m)
   in (f zero)
```
### Simplify Application Variable by Reduce And Right is False
```
let b = false
in let f = (fun m : Nat => m)
   in (f zero)
```
### Reduce Application
```
let f = (fun m : Nat => m)
in (f zero)
```
### Reduce Application
```
let m = zero
in m
```
### Reduce Application
```
zero
```
[ INFO  ] # Finished
